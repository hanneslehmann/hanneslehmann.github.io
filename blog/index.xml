<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hannes Lehmann</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://hanneslehmann.github.io/blog/index.xml/</link>
    <language>en-us</language>
    <author>Hannes Lehmann</author>
    <copyright>2014 Hannes Lehmann</copyright>
    <updated>Tue, 30 Dec 2014 00:00:00 UTC</updated>
    
    
    <item>
      <title>IoT - First Test of ESP8266 WiFi Module</title>
      <link>http://hanneslehmann.github.io/2014/12/ESP8266Module/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/12/ESP8266Module/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Setup: This how-to was done using a Linux-PC (LMDE-Linux Mint Debian).&lt;/li&gt;
&lt;li&gt;Scope: first communication test with the module over wifi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To try out the ESP8266 module I connected an USB-to-serial adapter which I ordered via the bay (&amp;ldquo;USB RS232 Serial TTL PL2303HX UART&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/usb_serial.jpg&#34; alt=&#34;Pinout&#34; title=&#34;Pinout of my module&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It was possible to reconnect the 5V power supply from USB within the module (just opened it) to the 3.3 Volt needed for the module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/usb_serial_mod.png&#34; alt=&#34;Re-connection&#34; title=&#34;Re-soldered red cable&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I wired up the module with the USB adapter; connected PIN CH_PD to VCC (3.3 Volt) and connected to PC. Red light goes on, blue flashes shortly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/pinout.png&#34; alt=&#34;Pinout&#34; title=&#34;Pinout of my module&#34; /&gt;
&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Signal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.3V (max 3.6V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ground&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TXD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Transmit Data (3.3V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RXD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Receive Data (3.3V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CH_PD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Chip Power down: (LOW = Power down active)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GPIO0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;General Purpose I/O 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GPIO2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;General Purpose I/O 2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reset (LOW = Reset active)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/connection.png&#34; alt=&#34;Connection&#34; title=&#34;Connect USB Serial to module&#34; /&gt;

The picture is not the best - the yellow bounded cable connects CH_PD with VCC. The green connector from the USB-Serial-Converter goes to RXD, and the white to TXD.&lt;/p&gt;

&lt;p&gt;After connecting the USB-Serial-Converter, my Linux shows following dmesg log:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[23081.471573] usb 1-3: New USB device found, idVendor=067b, idProduct=2303
[23081.471575] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=0
[23081.471576] usb 1-3: Product: USB-Serial Controller
[23081.471577] usb 1-3: Manufacturer: Prolific Technology Inc.
[23081.471957] pl2303 1-3:1.0: pl2303 converter detected
[23081.472510] usb 1-3: pl2303 converter now attached to ttyUSB1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I installed GtkTerm via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install gtkterm

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I made sure the config file of gtkterm: &amp;ldquo;.gtktermrc&amp;rdquo; in my home folder contains the right config for my setup (in fact I needed to change the port and speed config):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 115200
bits	= 8
stopbits	= 1
parity	= none
flow	= none
wait_delay	= 0
wait_char	= -1
rs485_rts_time_before_tx	= 30
rs485_rts_time_after_tx	= 30
echo	= False
crlfauto	= False
font	= &amp;quot;Nimbus Mono L, 14&amp;quot;
term_transparency	= False
term_show_cursor	= True
term_rows	= 80
term_columns	= 25
term_scrollback	= 200
term_visual_bell	= True
term_foreground_red	= 43253
term_foreground_blue	= 43253
term_foreground_green	= 43253
term_background_red	= 0
term_background_blue	= 0
term_background_green	= 0
term_background_saturation	= 0,500000

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I was ready to play around with gtkterm. Actually my terminal was showing nothing, until I typed the first command (AT). For details about the below mentioned commandos (all starting with AT) - please visit: &lt;a href=&#34;https://nurdspace.nl/ESP8266#AT_Commands&#34;&gt;https://nurdspace.nl/ESP8266#AT_Commands&lt;/a&gt; or &lt;a href=&#34;http://www.electrodragon.com/w/Wi07c&#34;&gt;this website&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AT

OK
AT+RST

OK

 ets Jan  8 2013,rst cause:4, boot mode:(3,7)

wdt reset
load 0x40100000, len 24444, room 16 
tail 12
chksum 0xe0
ho 0 tail 12 room 4
load 0x3ffe8000, len 3168, room 12 
tail 4
chksum 0x93
load 0x3ffe8c60, len 4956, room 4 
tail 8
chksum 0xbd
csum 0xbd

ready

AT+GMR
00160901

OK
AT?
no this fun
AT+CWMODE?
+CWMODE:2

OK
AT+CWMODE=3

OK
AT+CWMODE?
+CWMODE:3

OK
AT+CWLAP
+CWLAP:(0,&amp;quot;&amp;quot;,0)
+CWLAP:(4,&amp;quot;wifi1&amp;quot;,-86)
+CWLAP:(3,&amp;quot;wifi2&amp;quot;,-72)
+CWLAP:(3,&amp;quot;wifi3&amp;quot;,-83)
+CWLAP:(3,&amp;quot;mywifi&amp;quot;,-63)

OK
AT+CWJAP=&amp;quot;mywifi&amp;quot;,&amp;quot;mypass&amp;quot;

OK
AT+CIFSR
192.168.1.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After above commandos the module is connected with my home wifi (&amp;ldquo;mywifi&amp;rdquo;) which is secured with a password. The IP adress of the module is &amp;ldquo;192.168.1.20&amp;rdquo; (automatically received by the DHCP of the wifi router). Now I will start a TCP server listening on Port 8001 on the module (timeout is set to 180 sec because the module handles only a limited number of connections; we might free some long running idle ones):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OK
AT+CIPSERVER=1,8001

OK
AT+CIPSTO=180

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the linux box I open a terminal; started a telnet connection; entered the message &amp;ldquo;Helo&amp;rdquo; and pressed &amp;gt;enter&amp;lt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;telnet 192.168.15.20 8001
Trying 192.168.15.20...
Connected to 192.168.15.20.
Escape character is &#39;^]&#39;.
Helo


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the serial monitor (gtkterm) I can see the terminal receiving the message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Link

+IPD,0,6:Helo

OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Next step is to have an arduino react/respond on tcp messages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After consulting some forums in the internet I have read, that some additional preparation of the module is needed to talk with arduino (downgrade baudrate of the module). By the way - some alternative firmware exists for running LUA and/or even a webserver on the module using the GPIOs directly. But I want to talk to the Arduino Nano, so I need the following steps.&lt;/p&gt;

&lt;p&gt;Clone the flash utility:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/themadinventor/esptool.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the firmware &lt;a href=&#34;http://www.electrodragon.com/w/Wi07c&#34;&gt;esp8266.9.2.2.bin&lt;/a&gt; or &lt;a href=&#34;/esp8266/v0.9.2.2Firmware.zip&#34;&gt;here&lt;/a&gt; and unzip it to the folder of the esptool.&lt;/p&gt;

&lt;p&gt;Trying to run the flash utility gave me an error (note that my serial converter sits on USB1, your setup might be different!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./esptool.py -p /dev/ttyUSB1 write_flash 0x000000 v0.9.2.2\ AT\ Firmware.bin 
Traceback (most recent call last):
  File &amp;quot;./esptool.py&amp;quot;, line 22, in &amp;lt;module&amp;gt;
    import serial
ImportError: No module named serial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I had to install the python serial modul via pip:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pip install pyserial
Downloading/unpacking pyserial
  Downloading pyserial-2.7.tar.gz (122kB): 122kB downloaded
  Running setup.py egg_info for package pyserial
    
Installing collected packages: pyserial
  Running setup.py install for pyserial
    changing mode of build/scripts-2.7/miniterm.py from 644 to 755
    
    changing mode of /usr/local/bin/miniterm.py to 755
Successfully installed pyserial
Cleaning up...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that I was able to flash the firmware:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ./esptool.py -p /dev/ttyUSB1 write_flash 0x000000 v0.9.2.2\ AT\ Firmware.bin
Connecting...
Erasing flash...
Writing at 0x0007ef00... (100 %)

Leaving...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have to change the baudrate for gtkterm (see above for the details) and restart gtkterm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 9600
bits	= 8
stopbits	= 1
parity	= none
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing has changed for the communication with the module after the upgrade: after every command entered in gtkterm, not only Return has to be hit, but additionally Ctrl + J as well (CR+LF). So what do we get? Let&amp;rsquo;s change the baudrate to 57600:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
AT

OK
AT+GMR
0018000902

OK
AT+CIOBAUD?
+CIOBAUD:9600

OK
AT+CIOBAUD=57600
BAUD-&amp;gt;57600

OK
R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&amp;gt; reconfigure &amp;amp; restart gtkterm!&lt;/p&gt;

&lt;p&gt;As the new firmware changed some settings, we need to issue some more commands to get our tcp server back online (this time on ip 192.168.1.25&amp;hellip;.):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AT+CIPMUX?
+CIPMUX:0

OK
AT+CIPMUX=1

OK
AT+CIPMUX?

+CIPMUX:1

OK
AT+CIPSERVER=1,8001

OK
AT+CIFSR

192.168.4.1
192.168.1.25

OK
Link

+IPD,0,6:helo

OK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I will be ready to connect the Arduino Nano to my wifi module!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Connecting Arduino Nano is done really easily, with one level shifter (a resistor should work as well). I connected additionally the USB-Serial-Converter to the SoftSerial Arduino to see debug messages.&lt;/p&gt;

&lt;p&gt;The Arduino is powered through the USB connection to the PC. During upload of the Arduino Sketch, the serial connection to the Wifi module has to be removed and reconnected afterwards.&lt;/p&gt;

&lt;p&gt;I have pulled the CH_PD Pin to VCC, first with resistor (10k) then without. Without it was working more stable for me. &lt;a href=&#34;/esp8266/fritzing_layout.png&#34;&gt;Here&lt;/a&gt; the big picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/fritzing_layout_small.png&#34; alt=&#34;Schematic&#34; title=&#34;Schematic&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;What we now need is the corresponding Arduino Sketch. I will upload it soon to my GitHub repo - here the first draft, inspired by Ray Wang @ Rayshobby LLC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* ====== ESP8266 TCP Demo ======
 * Receive &amp;amp; Respond via TCP
 * (Updated Dec 30, 2014)
 * ==========================
 *
 * Change SSID and PASS to match your WiFi settings.
 * The IP address is displayed to soft serial upon successful connection.
 *
 * Inspired by
 * Ray Wang @ Rayshobby LLC
 * http://rayshobby.net/?p=9734
 * http://raysfiles.com/arduino/ESP8266a_arduino.ino
 */

#include &amp;lt;SoftwareSerial.h&amp;gt;

#define BUFFER_SIZE 512
#define esp Serial
#define SSID  &amp;quot;mywifi&amp;quot;      // change this to match your WiFi SSID
#define PASS  &amp;quot;mypassword&amp;quot;     // change this to match your WiFi password
#define PORT  &amp;quot;8001&amp;quot;          // using port 8001 by default

char buffer[BUFFER_SIZE];

// Software Serial for debug
SoftwareSerial dbg(10,11);  // use pins 10, 11 for software serial 

// By default we are looking for OK\r\n
char OKrn[] = &amp;quot;OK\r\n&amp;quot;;

// LED Pin
const int LED = 13;


byte wait_for_esp_response(int timeout, char* term=OKrn) {
  unsigned long t=millis();
  bool found=false;
  int i=0;
  int len=strlen(term);
  // wait for at most timeout milliseconds
  // or if OK\r\n is found
  while(millis()&amp;lt;t+timeout) {
    if(esp.available()) {
      buffer[i++]=esp.read();
      if(i&amp;gt;=len) {
        if(strncmp(buffer+i-len, term, len)==0) {
          found=true;
          break;
        }
      }
    }
  }
  buffer[i]=0;
  dbg.print(buffer);
  return found;
}

void setup() {

  // assume esp8266 operates at 57600 baud rate
  // change if necessary to match your modules&#39; baud rate
  esp.begin(57600);
  
  dbg.begin(9600);
  dbg.println(&amp;quot;begin.&amp;quot;);
  
  // Setup LED PIN as output
  pinMode(LED, OUTPUT);
  
  // blink test
  digitalWrite(LED, HIGH); // LED on
  delay(500); // 500 ms delay
  digitalWrite(LED, LOW); // LED off
    
  setupWiFi();

  // print device IP address
  dbg.print(&amp;quot;device ip addr:&amp;quot;);
  esp.println(&amp;quot;AT+CIFSR&amp;quot;);
  wait_for_esp_response(1000);
}

bool read_till_eol() {
  char incomingByte = 0;   // for incoming serial data
  static int i=0;
  if(esp.available()&amp;gt;0) {
    incomingByte = esp.read();
      buffer[i++]=incomingByte;
      if(i==BUFFER_SIZE)  i=0;
      if(i&amp;gt;1 &amp;amp;&amp;amp; buffer[i-2]==13 &amp;amp;&amp;amp; buffer[i-1]==10) {
        buffer[i]=0;
        i=0;
        dbg.print(buffer);
        return true;
    }
  }
  return false;
}

void loop() {
  int ch_id, packet_len;
  char *pb;  
  if(read_till_eol()) {
    dbg.println(&amp;quot;----------------------------------&amp;quot;);
    if(strncmp(buffer, &amp;quot;+IPD,&amp;quot;, 5)==0) {
      // request: +IPD,ch,len:data
      sscanf(buffer+5, &amp;quot;%d,%d&amp;quot;, &amp;amp;ch_id, &amp;amp;packet_len);
      if (packet_len &amp;gt; 0) {
        // read serial until packet_len character received
        // start from :
        pb = buffer+5;
        while(*pb!=&#39;:&#39;) pb++;
        pb++;
        dbg.print(&amp;quot;Message received: &amp;quot;);
        dbg.println(pb);
        send_Response(ch_id, &amp;quot;ACK&amp;quot;);
        if (strncmp(pb, &amp;quot;LEDON&amp;quot;, 5) == 0) {
          digitalWrite(LED, HIGH); // LED on
        }
        if (strncmp(pb, &amp;quot;LEDOFF&amp;quot;, 6) == 0){
          digitalWrite(LED, LOW); // LED on
        }
      }
    }
  }
}


void send_Response(int ch_id, String content) {
  esp.print(&amp;quot;AT+CIPSEND=&amp;quot;);
  esp.print(ch_id);
  esp.print(&amp;quot;,&amp;quot;);
  esp.println(content.length());
  if(wait_for_esp_response(2000, &amp;quot;&amp;gt; &amp;quot;)) {
    esp.print(content);
  } else {
    esp.print(&amp;quot;AT+CIPCLOSE=&amp;quot;);
    esp.println(ch_id);
  }
}


void setupWiFi() {
  // try empty AT command
  esp.println(&amp;quot;AT&amp;quot;);
  wait_for_esp_response(1000);

  // set mode 1 (client)
  esp.println(&amp;quot;AT+CWMODE=1&amp;quot;);
  wait_for_esp_response(1000);  

  // reset WiFi module
  esp.print(&amp;quot;AT+RST\r\n&amp;quot;);
  wait_for_esp_response(1500);
 
  // join AP
  esp.print(&amp;quot;AT+CWJAP=\&amp;quot;&amp;quot;);
  esp.print(SSID);
  esp.print(&amp;quot;\&amp;quot;,\&amp;quot;&amp;quot;);
  esp.print(PASS);
  esp.println(&amp;quot;\&amp;quot;&amp;quot;);
  // this may take a while, so wait for 5 seconds
  wait_for_esp_response(5000);
  
  esp.println(&amp;quot;AT+CIPSTO=30&amp;quot;);  
  wait_for_esp_response(1000);

  // start server
  esp.println(&amp;quot;AT+CIPMUX=1&amp;quot;);
  wait_for_esp_response(1000);
  
  esp.print(&amp;quot;AT+CIPSERVER=1,&amp;quot;); // turn on TCP service
  esp.println(PORT);
  wait_for_esp_response(1000);
  
    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A little success: Arduino sends correctly the AT commands to connect to the network! It receives an IP adress, I even can telnet to it!&lt;/p&gt;

&lt;p&gt;I can see (on the debug serial) following commands running through:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;begin.
AT

OK
AT+CWMODE=1
no change
AT+RST

OK
AT+CWJAP=&amp;quot;mywlan&amp;quot;,&amp;quot;mypassword&amp;quot;
B�
  r�Ĥ���HB߬!{�����1�!�+!��B(�C)����B�B1�c+&amp;amp;ƅ��&amp;quot;�C�*�B����!(��9*)%�Ǆ�b�c����Cx��B)�!���r�,%��D��c����C�!愆D
[System Ready, Vendor:www.ai-thinker.com]
AT+CIPSTO=30

ERROR
AT+CIPMUX=1

OK
AT+CIPSERVER=1,8080

OK
device ip addr:AT+CIFSR
192.168.1.30

OK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does not work?&lt;/p&gt;

&lt;p&gt;I wanted to switch the on-board LED of the Arduino via TCP commands (&amp;ldquo;LEDON&amp;rdquo; / &amp;ldquo;LEDOFF&amp;rdquo;) but at the moment I am struggling with the communication from the esp8266 to the Arduino. Sending the message &amp;ldquo;Hello&amp;rdquo; through a telnet terminal, I can see that the Wifi module is sending the complete message: &amp;ldquo;+IPD,0,7:Hello&amp;rdquo; but only a crippled message is received by the Arduino &amp;ldquo;+0lloOK&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;.to be continued&amp;hellip;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you run into problems or if you have any suggestions for the mistakes I have made, please leave a comment!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Continous Integration BW5.12/Jenkins - Part I</title>
      <link>http://hanneslehmann.github.io/2014/12/jenkinstibco/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/12/jenkinstibco/</guid>
      <description>

&lt;p&gt;First some pre-requisites.&lt;/p&gt;

&lt;p&gt;The workflow of a Continous Integration with BW would be (GIT is used in this case, same thing can be done with SVN or other source control tools as well):&lt;/p&gt;

&lt;p&gt;Developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tibco Designer &amp;mdash;-&amp;gt; create &amp;amp; save &amp;mdash;-&amp;gt; Project&lt;/li&gt;
&lt;li&gt;Project &amp;mdash; push to repo &amp;mdash; &amp;gt; GIT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jenkins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GIT &amp;mdash; clone project locally to&amp;mdash;&amp;gt; project_dir&lt;/li&gt;
&lt;li&gt;buildear &amp;mdash; create deployment artifact to &amp;mdash;&amp;gt; project_dir/app.ear&lt;/li&gt;
&lt;li&gt;AppManage &amp;mdash; extract config from ear into &amp;mdash;&amp;gt;  project_dir/app_config.xml&lt;/li&gt;
&lt;li&gt;Script (Ant, bash,..) &amp;mdash; modify configs within &amp;mdash;&amp;gt; project_dir/app_config.xml&lt;/li&gt;
&lt;li&gt;AppManage &amp;mdash; combine ear and configs &amp;mdash;&amp;gt; deploy to BW domain&lt;/li&gt;
&lt;li&gt;GIT? &amp;mdash;&amp;gt; commit/push deployment artifacts together with config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Jenkins job can be run manually, scheduled or, if configured correctly, with the source control system, on every check-in/push.&lt;/p&gt;

&lt;p&gt;This article covers only a really abstraced view on the process, which can grow to complexity. Only some random thoughts what has to be clearly defined before setting up CI (without beeing complete):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The CLI tool chain from TIBCO is needed on the same box, where the applications are build (either on a Jenkins bot, or some remote scripting&amp;hellip;), how can this be achieved (Licences..?)&lt;/li&gt;
&lt;li&gt;Build strategy: how is the branching/staging done? So, we need to tell Jenkins what to check out from where/when (on every build?) Manually if new branches are created?&lt;/li&gt;
&lt;li&gt;The target environment: how many staging boxes are there (Dev, Test, UAT, Prod)? Should the build be done automatically on which ones? Is there access from Jenkins (or it&amp;rsquo;s bots to all the needed machines?)&lt;/li&gt;
&lt;li&gt;Any quality assurance before deployment? Source code checks (e.g. naming conventions, comments,&amp;hellip;), automated testing?&lt;/li&gt;
&lt;li&gt;What happens in a case of failure? What would be the way to recover a (former) working version of the application?&lt;/li&gt;
&lt;li&gt;How can new jobs be added to Jenkins? Any Administrator/Ops Team? Automated?&lt;/li&gt;
&lt;li&gt;Any automated reports needed?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following steps have been done on a Windows Box (AWS Windows Server 2012).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Jenkins installation&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to Jenkins Homepage: &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;http://jenkins-ci.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download Windows Package / Unzip and start &amp;gt;setup.exe&amp;lt;&lt;/li&gt;
&lt;li&gt;Choose the installation directory. After setup is completed (on my box) a browser pops up, showing Jenkins waiting for jobs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/win1.jpg&#34; alt=&#34;Installation of Jenkins on Windows completed&#34; title=&#34;Jenkins on Windows&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you need to change the port of Jenkins standard configuration, it can be changed by editing the jenkins.xml file (change &lt;strong&gt;httpPort=8080&lt;/strong&gt;) which is located in the installation directory (choosen during installation).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/win2.png&#34; alt=&#34;Config file&#34; title=&#34;Jenkins config on Windows&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This was my original config - useful to increase heapsize etc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;service&amp;gt;
  &amp;lt;id&amp;gt;jenkins&amp;lt;/id&amp;gt;
  &amp;lt;name&amp;gt;Jenkins&amp;lt;/name&amp;gt;
  &amp;lt;description&amp;gt;This service runs Jenkins continuous integration system.&amp;lt;/description&amp;gt;
  &amp;lt;env name=&amp;quot;JENKINS_HOME&amp;quot; value=&amp;quot;%BASE%&amp;quot;/&amp;gt;
  &amp;lt;!--
    if you&#39;d like to run Jenkins with a specific version of Java, specify a full path to java.exe.
    The following value assumes that you have java in your PATH.
  --&amp;gt;
  &amp;lt;executable&amp;gt;%BASE%\jre\bin\java&amp;lt;/executable&amp;gt;
  &amp;lt;arguments&amp;gt;-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -jar &amp;quot;%BASE%\jenkins.war&amp;quot; --httpPort=8080&amp;lt;/arguments&amp;gt;
  &amp;lt;!--
    interactive flag causes the empty black Java window to be displayed.
    I&#39;m still debugging this.
  &amp;lt;interactive /&amp;gt;
  --&amp;gt;
  &amp;lt;logmode&amp;gt;rotate&amp;lt;/logmode&amp;gt;

  &amp;lt;onfailure action=&amp;quot;restart&amp;quot; /&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After applying any change, restart the Jenkins Service using e.g. the Windows Task Manager. For this article I changed the Jenkins Port to 6060.&lt;/p&gt;

&lt;p&gt;For more details (e.g. issues or advanced config, such as installing jenkins as a slave, check out: &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service&#34;&gt;the jenkins wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Preparation of BW5.12 scripted deployment&lt;/h2&gt;

&lt;p&gt;Within TIBCO BusinessWorks 5.12 ear-files (deployable artifact) are created via the TIBCO Utility/Script BuildEar. The deployment is done via the AppManage Utility. Both are available after installation of BW TRA.&lt;/p&gt;

&lt;p&gt;The AppManage utility must be run on a machine that is part of the administration domain you are updating.&lt;/p&gt;

&lt;p&gt;Example manual steps for deploying an application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AppManage -deploy -ear D:\jenkins\ears\deployment\helloworld_service2.ear -deployconfig D:\jenkins\ears\deployment\hello_service-bw5_dev.xml -cred D:\jenkins\cred.txt -app TestServices/hello-service -domain bw5_dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we would deploy &amp;amp; start a service within the TestServices folder. The AppManage Tool is located in the &lt;strong&gt;tra&lt;/strong&gt; folder of your installation (e.g. C:\tibco\tra\5.9\bin).&lt;/p&gt;

&lt;p&gt;The ear file can be created automatically via the build tool:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildear.exe -s -ear /helloworld_service.archive -o D:\jenkins\ears\deployment\helloworld_service2.ear -p C:\Users\Bob\Documents\bw5\helloworld_service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ear) takes the name of the project archive file, don&amp;rsquo;t forget the leading slasch!&lt;/li&gt;
&lt;li&gt;o) is the ouptut directory&lt;/li&gt;
&lt;li&gt;p) is the directory of the project (where the archive file is located)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The buildear is located in the same directory as the AppManage Tool.
For more specific explanations check the Tibco Documentation!&lt;/p&gt;

&lt;p&gt;Before deploying, as mentioned before, the config file has to be created (by AppManage) and adjusted to the target environment where the deployment will happen (usually a clever script).&lt;/p&gt;

&lt;p&gt;Export the config of an existing ear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AppManage -export -ear  D:\jenkins\ears\deployment\helloworld_service2.ear -out D:\jenkins\ears\deployment\helloworld_service2.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, in any case following command can be useful to export a current config from the Admin. It helps to understand what has to be changed inside the config file (when you are setting up things the first time)&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AppManage -export -app TestServices/helloworld_service -out D:/jenkins/helloworld_service.xml -domain bw5_dev -cred D:\jenkins\cred.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Next steps will include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jenkins/Git Integration&lt;/li&gt;
&lt;li&gt;automated checkout by Jekins&lt;/li&gt;
&lt;li&gt;automated deployment by Jekins&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Customer experience management</title>
      <link>http://hanneslehmann.github.io/2014/11/cem_01_en/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/11/cem_01_en/</guid>
      <description>&lt;p&gt;It seems that we are back to the future: 2015 will be the year where discussions about Customer Experience Management will gain even more speed. A lot of companies are trying to push tools out to the space.
They adress challenges of our new and modern world:&lt;/p&gt;

&lt;p&gt;30 years ago, there were small local shops (in Germany so called &amp;ldquo;Tante Emma Laden&amp;rdquo;), they knew you as a customer and most of the time even your needs. They knew even your family and possibly have seen you growing and growing to an adult.&lt;/p&gt;

&lt;p&gt;So, when you stepped in once a week, they were already prepared with your usual shopping list&amp;hellip;and when it was sommer - they put some sun blocker on top. Possibly they remembered you&amp;rsquo;ve broken your sun glasses last sommer, asking you if you want to buy one. On the other days, they already prepared you the right news-paper. And when it was week-end, it was time for your favorite &amp;ldquo;Croissant&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Nowadays this intense relationship to the customer got lost - and what do you do? You try to collect as much data as possible to gain insights of the customer: the feelings, the (actual) needs and even predictions what she/he might need in the future.&lt;/p&gt;

&lt;p&gt;Tibco is placing the &lt;a href=&#34;http://www.tibco.com/company/news/releases/2014/tibco-announces-its-new-marketing-application-built-to-optimize-consumer-engagement?adbsc=social_engage__20140910_31264846&#34;&gt;Engage Platform&lt;/a&gt; into the bet.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Kickstart BW5.12 Project</title>
      <link>http://hanneslehmann.github.io/2014/11/kickstart_bw5proj_en/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/11/kickstart_bw5proj_en/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Kickstart BW5.12 Project&lt;/h2&gt;

&lt;p&gt;I have created the a small make file to speed up BusinessWorks Designer Project creation. Additionally it creates some sub-directories which helps keeping the project structure clean.&lt;/p&gt;

&lt;p&gt;I will possibly update the make file, so be sure to subscribe to the git repo!&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make project=&#39;somename&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here comes the make file (can be found in my GitHub repository). It takes an existing bw project stored in a (hidden) directory under &lt;em&gt;.template&lt;/em&gt; and copies it to the target project name. It then replaces the name in some files and creates some additional sub-directories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Makefile 
# Created to speed up initialization of a TIBCO BW 5.12 project
# by Hannes Lehmann
#

PROJ=${project}
PROJDIR=
DESIGNER_BASE=/data/tibco/designer/5.9

run:    
ifdef PROJ
	@echo Creating skeleton for a new project called: $(project)
	@mkdir -p ${project}/Schemas 
	@mkdir -p ${project}/Processes
	@mkdir -p ${project}/Services
	@mkdir -p ${project}/Resources  
	@cp -R .template/* $(PROJ)
	@sed -i &#39;s/1template1/${project}/g&#39; ${project}/vcrepo.dat
	@sed -i &#39;s/1template1/${project}/g&#39; ${project}/defaultVars/defaultVars.substvar
else
	@echo Nothing done, try to pass an argument project=
endif

launch:
	cd $(DESIGNER_BASE)/bin/ &amp;amp;&amp;amp; $(DESIGNER_BASE)/bin/designer $(CURDIR)/$(PROJ)
	cd $(DIR)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I do with this script is: run it for creating a new BW project. Before you can use it, either you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a project called &amp;lsquo;1template1&amp;rsquo; and change the directory to &amp;lsquo;.template&amp;rsquo;&lt;/li&gt;
&lt;li&gt;clone the git repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually I will add additional functionality to the script (possibly remove the dependency on the template project).&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Best Practice for BW project structure&lt;/h2&gt;

&lt;p&gt;Create some folder insider your project collecting/grouping functions together. For example the Makefile above will create following directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Schemas (for XSDs, WSDLs, etc.)&lt;/li&gt;
&lt;li&gt;Processes (put your bw processes here)&lt;/li&gt;
&lt;li&gt;Services (if any WebServices are created, collect them here)&lt;/li&gt;
&lt;li&gt;Resources (any http, jdbc or whatever else is needed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is only a recommendation and a really flat hierarchy. Avoid to create to many folders/subdirs as it should still be usable (remember: some OSses/Systems don&amp;rsquo;t like really long path names).&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Markdown Workflow Part I</title>
      <link>http://hanneslehmann.github.io/2014/11/markdown_01_en/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/11/markdown_01_en/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Markdown for documenting&lt;/h2&gt;

&lt;p&gt;I have created the first small bash script to help ease my Markdown workflow.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;whatchme.sh file.md &#39;grep &amp;quot;^#&amp;quot; file.md&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here comes the script (can be found in my GitHub repository for cloning/forking as well!). I found most of it in a forum, thanks to that guys!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# Script by Hannes Lehmann
# Use it, when you need it

if (( $# &amp;lt; 2 )); then
    echo &amp;quot;Not enough arguments passed to whatchme!&amp;quot;
    echo &amp;quot;Provide the filename as first argument,&amp;quot;
    echo &amp;quot;and the command to be executed as second argument.&amp;quot;
    echo &amp;quot;example: whatchme.sh file.md &#39;grep something file.md&#39;&amp;quot;
    exit 1
fi

while true    
do
   ATIME=`stat -c %Z $1`

   if [[ &amp;quot;$ATIME&amp;quot; != &amp;quot;$LTIME&amp;quot; ]]
   then    
	clear
       	eval $2
       	LTIME=$ATIME
   fi
   sleep 1
done 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I do with this script is: run it in a separate / parallel shell to my editor (where I am editing the current markdown document) to have a fast overview of the chapters and their structure.&lt;/p&gt;

&lt;p&gt;The next day I will enhance the script with automated chapter numbering to increase the structural view.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Hello Hugo!</title>
      <link>http://hanneslehmann.github.io/2014/11/hello-hugo_en/</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/11/hello-hugo_en/</guid>
      <description>

&lt;p&gt;Hello from Hugo! And hello from Hannes! This is my first blog entry, realized thanks to Hugo; written in Markdown.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a the link to &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will optimize my build process (make file already created) and will post findings here and in GitHub.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Showing off with Markdown&lt;/h2&gt;

&lt;p&gt;A full cheat sheet can be found &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;here&lt;/a&gt;
or through &lt;a href=&#34;https://google.com/&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Hosted on GitHub&lt;/h2&gt;

&lt;p&gt;How a page in GitHub can be hosted is described &lt;a href=&#34;https://pages.github.com/&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s so easy and fast to publish pages via git pull/add/commit/push!&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>