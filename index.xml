<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hannes Lehmann</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml/</link>
    <language>en-us</language>
    <author>Hannes Lehmann</author>
    <copyright>2014 Hannes Lehmann</copyright>
    <updated>Mon, 24 Nov 2014 00:00:00 UTC</updated>
    
    
    <item>
      <title>Kickstart BW5.12 Project</title>
      <link>http://localhost:1313/2014/11/kickstart_bw5proj/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://localhost:1313/2014/11/kickstart_bw5proj/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Kickstart BW5.12 Project&lt;/h2&gt;

&lt;p&gt;I have created the a small make file to speed up BusinessWorks Designer Project creation. Additionally it creates some sub-directories which helps keeping the project structure clean.&lt;/p&gt;

&lt;p&gt;I will possibly update the make file, so be sure to subscribe to the git repo!&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make project=&#39;somename&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here comes the make file (can be found in my GitHub repository). It takes an existing bw project stored in a (hidden) directory under &lt;em&gt;.template&lt;/em&gt; and copies it to the target project name. It then replaces the name in some files and creates some additional sub-directories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Makefile 
# Created to speed up initialization of a TIBCO BW 5.12 project
# by Hannes Lehmann
#

PROJ=${project}
PROJDIR=
DESIGNER_BASE=/data/tibco/designer/5.9

run:    
ifdef PROJ
	@echo Creating skeleton for a new project called: $(project)
	@mkdir -p ${project}/Schemas 
	@mkdir -p ${project}/Processes
	@mkdir -p ${project}/Services
	@mkdir -p ${project}/Resources  
	@cp -R .template/* $(PROJ)
	@sed -i &#39;s/1template1/${project}/g&#39; ${project}/vcrepo.dat
	@sed -i &#39;s/1template1/${project}/g&#39; ${project}/defaultVars/defaultVars.substvar
else
	@echo Nothing done, try to pass an argument project=
endif

launch:
	cd $(DESIGNER_BASE)/bin/ &amp;amp;&amp;amp; $(DESIGNER_BASE)/bin/designer $(CURDIR)/$(PROJ)
	cd $(DIR)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I do with this script is: run it for creating a new BW project. Before you can use it, either you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a project called &amp;lsquo;1template1&amp;rsquo; and change the directory to &amp;lsquo;.template&amp;rsquo;&lt;/li&gt;
&lt;li&gt;clone the git repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually I will add additional functionality to the script (possibly remove the dependency on the template project).&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Markdown Workflow Part I</title>
      <link>http://localhost:1313/2014/11/markdown_01/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://localhost:1313/2014/11/markdown_01/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Markdown for documenting&lt;/h2&gt;

&lt;p&gt;I have created the first small bash script to help ease my Markdown workflow.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;whatchme.sh file.md &#39;grep &amp;quot;^#&amp;quot; file.md&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here comes the script (can be found in my GitHub repository for cloning/forking as well!). I found most of it in a forum, thanks to that guys!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# Script by Hannes Lehmann
# Use it, when you need it

if (( $# &amp;lt; 2 )); then
    echo &amp;quot;Not enough arguments passed to whatchme!&amp;quot;
    echo &amp;quot;Provide the filename as first argument,&amp;quot;
    echo &amp;quot;and the command to be executed as second argument.&amp;quot;
    echo &amp;quot;example: whatchme.sh file.md &#39;grep something file.md&#39;&amp;quot;
    exit 1
fi

while true    
do
   ATIME=`stat -c %Z $1`

   if [[ &amp;quot;$ATIME&amp;quot; != &amp;quot;$LTIME&amp;quot; ]]
   then    
	clear
       	eval $2
       	LTIME=$ATIME
   fi
   sleep 1
done 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I do with this script is: run it in a separate / parallel shell to my editor (where I am editing the current markdown document) to have a fast overview of the chapters and their structure.&lt;/p&gt;

&lt;p&gt;The next day I will enhance the script with automated chapter numbering to increase the structural view.&lt;/p&gt;
</description>
    </item>
    
    
    
    
    
    <item>
      <title>Hello Hugo!</title>
      <link>http://localhost:1313/2014/11/hello-hugo/</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://localhost:1313/2014/11/hello-hugo/</guid>
      <description>

&lt;p&gt;Hello from Hugo! And hello from Hannes! This is my first blog entry, realized thanks to Hugo; written in Markdown.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a the link to &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will optimize my build process (make file already created) and will post findings here and in GitHub.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Showing off with Markdown&lt;/h2&gt;

&lt;p&gt;A full cheat sheet can be found &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;here&lt;/a&gt;
or through &lt;a href=&#34;https://google.com/&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Hosted on GitHub&lt;/h2&gt;

&lt;p&gt;How a page in GitHub can be hosted is described &lt;a href=&#34;https://pages.github.com/&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s so easy and fast to publish pages via git pull/add/commit/push!&lt;/p&gt;
</description>
    </item>
    
    
    
    
  </channel>
</rss>