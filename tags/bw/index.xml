<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hannes Lehmann</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://hanneslehmann.github.io/tags/bw/index.xml/</link>
    <language>en-us</language>
    <author>Hannes Lehmann</author>
    <copyright>2015 Hannes Lehmann</copyright>
    <updated>Tue, 13 Jan 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>Continous Integration BW5.12/Jenkins - Part II</title>
      <link>http://hanneslehmann.github.io/2015/01/jenkinstibco_II/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2015/01/jenkinstibco_II/</guid>
      <description>

&lt;p&gt;That&amp;rsquo;s the second part for the topic &amp;ldquo;Continous Integration BW5.12/Jenkins&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This post describes how to pull/clone a GIT repository with Jenkins, and run to CLI commands to build and deploy a TIBCO BW process. The first part can be found &lt;a href=&#34;http://hanneslehmann.github.io/2014/12/jenkinstibco/&#34;&gt;here&lt;/a&gt;, describing the CLI commands and giving a short overview of the Jenkins install process.&lt;/p&gt;

&lt;p&gt;All steps are done on an AWS Windows Server 2012 box, using BW (5.12), TRA (5.9), the latest Jenkins (1.596) and GIT (1.9.5).&lt;/p&gt;

&lt;p&gt;As already mentioned, I will use GIT in this case as SCM (Source Code Management) to make things more interesting (you could leave SCM out and let Jenkins build directly from your local dir) we need to download Git from &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;here&lt;/a&gt; and install it (leaving all default values). While writing this post version 1.9.5 of Git was the actual one.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Configure Jenkins to pull or clone a GIT repo&lt;/h3&gt;

&lt;p&gt;Install Jenkins Git Plugin from &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now Jenkins needs to be told, where to find git (Manage Jenkins-&amp;gt;Configure System, or &lt;a href=&#34;http://localhost:6060/configure&#34;&gt;http://localhost:6060/configure&lt;/a&gt; - remember to change the port to reflect your configuration).&lt;/p&gt;

&lt;p&gt;If you get the error message &amp;ldquo;There&amp;rsquo;s no such executable git.exe in PATH&amp;rdquo; you have to enter the complete path to include your git executable (on my machine: &amp;ldquo;C:\Program Files (x86)\Git\bin\git.exe&amp;rdquo;) or update your PATH variable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/gitjenkins.png&#34; alt=&#34;Git Jenkins Setup&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I will not dive deeper in detail how to integrate GIT with Jenkins, as there are already enough tutorials covering this topic (e.g. &lt;a href=&#34;http://sanketdangi.com/post/62740311628/integrate-jenkins-github-trigger-build-process&#34;&gt;http://sanketdangi.com/post/62740311628/integrate-jenkins-github-trigger-build-process&lt;/a&gt;). In short steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create new freestyle project in Jenkins&lt;/li&gt;
&lt;li&gt;choose Git as SCM&lt;/li&gt;
&lt;li&gt;Enter the needed config (repo-URL, credentials)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/gitjobjenkins.png&#34; alt=&#34;Git Job Jenkins Setup&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;After creating some content in the repo, Jenkins should now be able to run the job (it only downloads content of the repo). Just try it to make sure the communication from Jenkins to GitHub.com works.&lt;/p&gt;

&lt;p&gt;We will skip the part &amp;ldquo;trigger builds by commit/push&amp;rdquo;. Triggering jobs by commits would mean, that there is an access to your Jenkins URL from the outside (if you are using e.g. GitHub.com). I will check this out in an additional post, at the moment I am happy scheduling jobs manually or time triggered (as Jenkins offers).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/gitsuccess1.png&#34; alt=&#34;Git Job Jenkins Download success&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;So, now let&amp;rsquo;s add some build steps&amp;hellip;&lt;/p&gt;

&lt;p&gt;These steps are highly dependend on your repo structure:
* will every BW project has it own GIT repo?
* will the whole BW development happen in one GIT repo?
* or any other organizational structures (team, milestone, project, &amp;hellip;)&lt;/p&gt;

&lt;p&gt;As well you will need some thoughts about naming convention of the repos.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let&amp;rsquo;s make a switch to the other end, while you are thinking about the above mentioned questions, we will find out how to check-in / push an example BW project to the Github repo.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Push source code to SCM&lt;/h3&gt;

&lt;p&gt;As I created a github repo and I have already a bw project, I need to init git in the existing bw project (the parent folder of the archive file, not directly the same dir!).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\Users\User\Documents\bw5&amp;gt;git init
Initialized empty Git repository in C:/Users/User/Documents/bw5/.git/

C:\Users\User\Documents\bw5&amp;gt;git remote add origin https://github.com/hanneslehmann/integration_gitjenkins.git

C:\Users\User\Documents\bw5&amp;gt;git config --global user.email &amp;quot;hannes.lehmann@nterra.com&amp;quot;

C:\Users\User\Documents\bw5&amp;gt;git config --global user.name &amp;quot;Hannes&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can use the standard git procedure (add/commit/push) to upload your code to the SCM.&lt;/p&gt;

&lt;p&gt;To make thinks more visible, I installed a GUI for the source code handling called &lt;a href=&#34;http://www.sourcetreeapp.com/download/&#34;&gt;SourceTree&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Configure build job&lt;/h3&gt;

&lt;p&gt;For the job we re-configure the workspace path under the button &amp;ldquo;advanced&amp;rdquo; of the build job (I had an already running job for testing the setup, I will re-cycle this).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/jenkinsworkspaceconf.png&#34; alt=&#34;Add build step&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now, if you run the job, the content (the BW project) should be downloaded successfully to the defined folder.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build the ear file!&lt;/p&gt;

&lt;p&gt;I am doing this with normal windows commands, as shown in Part I. No ant, no maven (at the moment).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/jenkinsbuildstep.png&#34; alt=&#34;Add build step&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We choose Execute Windows batch command and insert the command line we previously tested:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd C:\tibco\tra\5.9\bin\buildear.exe -s -ear /helloworld_service.archive -o C:\jenkins\ears\helloworld_service.ear -p C:\jenkins\workspace\hello_world\helloworld_service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/jenkinsbuildstepadd.png&#34; alt=&#34;Add build step, configure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Pitfall: the buildear utility does not like any other files in the directory (even the hidden &amp;ldquo;.git&amp;rdquo; directory, or the README.md hurts! Be careful in planning your repo structure!)&lt;/p&gt;

&lt;p&gt;Now we can hit the Jenkins build icon and when everything was configured properly, the ear file is build!&lt;/p&gt;

&lt;p&gt;Sample Jenkins console output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started by user admin
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe rev-parse --is-inside-work-tree # timeout=10
Fetching changes from the remote Git repository
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe config remote.origin.url https://github.com/hanneslehmann/integration_gitjenkins.git # timeout=10
Fetching upstream changes from https://github.com/hanneslehmann/integration_gitjenkins.git
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe --version # timeout=10
using .gitcredentials to set credentials
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe config --local credential.helper store --file=\&amp;quot;C:\Windows\TEMP\git8329605896234644724.credentials\&amp;quot; # timeout=10
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe fetch --tags --progress https://github.com/hanneslehmann/integration_gitjenkins.git +refs/heads/*:refs/remotes/origin/*
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe config --local --remove-section credential # timeout=10
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe rev-parse &amp;quot;refs/remotes/origin/master^{commit}&amp;quot; # timeout=10
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe rev-parse &amp;quot;refs/remotes/origin/origin/master^{commit}&amp;quot; # timeout=10
Checking out Revision c3c0893b9d4b81398a8f53c77a3c157b60275ab9 (refs/remotes/origin/master)
Unable to auto-install JDK until the license is accepted.
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe config core.sparsecheckout # timeout=10
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe checkout -f c3c0893b9d4b81398a8f53c77a3c157b60275ab9
 &amp;gt; C:\Program Files (x86)\Git\bin\git.exe rev-list c3c0893b9d4b81398a8f53c77a3c157b60275ab9 # timeout=10
Unable to auto-install JDK until the license is accepted.
[hello_world] $ cmd /c call C:\Windows\TEMP\hudson3427319450101485603.bat

C:\jenkins\workspace\hello_world&amp;gt;cd C:\tibco\tra\5.9\bin\ 

C:\tibco\tra\5.9\bin&amp;gt;buildear.exe -s -ear /helloworld_service.archive -o C:\jenkins\ears\helloworld_service.ear -p C:\jenkins\workspace\hello_world\helloworld_service 
Starting up...

Enterprise Archive File has built correctly.
Ear created in: C:\jenkins\ears\helloworld_service.ear

C:\tibco\tra\5.9\bin&amp;gt;exit 0 
Finished: SUCCESS

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Create the deployment job&lt;/h3&gt;

&lt;p&gt;After this, I can create a second job (I created a copy of the first job and removed the SCM part), to get the deployment done. You could do everything in one job, but possibly you have multiple environments and you want to build the ear file undependent from the deployment.&lt;/p&gt;

&lt;p&gt;Hint: use a naming convention / views in Jenkins to organize all your jobs!&lt;/p&gt;

&lt;p&gt;The deployment job doesn&amp;rsquo;t need any configuration besides the &amp;ldquo;Build Step/Execute Windows Command&amp;rdquo; with following data (valid for my configuration):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd C:\tibco\tra\5.9\bin\
AppManage -deploy -ear C:\jenkins\ears\helloworld_service.ear -deployconfig C:\jenkins\configs\hello_service-bw5_dev.xml -cred C:\jenkins\configs\cred_dev.txt -app TestServices/hello-service -domain bw5_dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deployment, output of Jenkins:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started by user admin
BuildingUnable to auto-install JDK until the license is accepted.
 in workspace C:\jenkins\workspace\hello_world
Unable to auto-install JDK until the license is accepted.
[hello_world] $ cmd /c call C:\Windows\TEMP\hudson3803253491767647451.bat

C:\jenkins\workspace\hello_world&amp;gt;cd C:\tibco\tra\5.9\bin\ 

C:\tibco\tra\5.9\bin&amp;gt;AppManage -deploy -ear C:\jenkins\ears\helloworld_service.ear -deployconfig C:\jenkins\configs\hello_service-bw5_dev.xml -cred C:\jenkins\configs\cred_dev.txt -app TestServices/hello-service -domain bw5_dev 
Checking if master server is responding ...
Finished checking
Initializing ...
Finished initialization
Loading archive ...
Finished loading archive
Configuring application ...
Finished configuring application
Deploying application ...

INFO : Received AgentInitialMsg: AgentInitialMsg [Agent=WIN-881H4D8KL83:none:bw5_dev:1421157162458:30] ## Tue Jan 13 15:09:57 CET 2015 ## 
Instance helloworld_service created succesfully

Finished deploying application
Finished successfully in 37 seconds

C:\tibco\tra\5.9\bin&amp;gt;exit 0 
Finished: SUCCESS

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check the TIBCO Admin GUI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/runningbwservice.png&#34; alt=&#34;Admin GUI running service&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;From here: AppManage fails, if there is already a process with the same name. For update/upgrading existing processes, and the right packaging strategy, please refer to TIBCO guidelines!&lt;/p&gt;

&lt;p&gt;I will follow up to add some more complexity, e.g. change some global variables during deployment.&lt;/p&gt;

&lt;p&gt;As usual - if you have suggestions for more details, errors in text, just let me know, please!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Continous Integration BW5.12/Jenkins - Part I</title>
      <link>http://hanneslehmann.github.io/2014/12/jenkinstibco/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/12/jenkinstibco/</guid>
      <description>

&lt;p&gt;First some pre-requisites.&lt;/p&gt;

&lt;p&gt;The workflow of a Continous Integration with BW would be (GIT is used in this case, same thing can be done with SVN or other source control tools as well):&lt;/p&gt;

&lt;p&gt;Developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tibco Designer &amp;mdash;-&amp;gt; create &amp;amp; save &amp;mdash;-&amp;gt; Project&lt;/li&gt;
&lt;li&gt;Project &amp;mdash; push to repo &amp;mdash; &amp;gt; GIT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jenkins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GIT &amp;mdash; clone project locally to&amp;mdash;&amp;gt; project_dir&lt;/li&gt;
&lt;li&gt;buildear &amp;mdash; create deployment artifact to &amp;mdash;&amp;gt; project_dir/app.ear&lt;/li&gt;
&lt;li&gt;AppManage &amp;mdash; extract config from ear into &amp;mdash;&amp;gt;  project_dir/app_config.xml&lt;/li&gt;
&lt;li&gt;Script (Ant, bash,..) &amp;mdash; modify configs within &amp;mdash;&amp;gt; project_dir/app_config.xml&lt;/li&gt;
&lt;li&gt;AppManage &amp;mdash; combine ear and configs &amp;mdash;&amp;gt; deploy to BW domain&lt;/li&gt;
&lt;li&gt;GIT? &amp;mdash;&amp;gt; commit/push deployment artifacts together with config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Jenkins job can be run manually, scheduled or, if configured correctly, with the source control system, on every check-in/push.&lt;/p&gt;

&lt;p&gt;This article covers only a really abstraced view on the process, which can grow to complexity. Only some random thoughts what has to be clearly defined before setting up CI (without beeing complete):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The CLI tool chain from TIBCO is needed on the same box, where the applications are build (either on a Jenkins bot, or some remote scripting&amp;hellip;), how can this be achieved (Licences..?)&lt;/li&gt;
&lt;li&gt;Build strategy: how is the branching/staging done? So, we need to tell Jenkins what to check out from where/when (on every build?) Manually if new branches are created?&lt;/li&gt;
&lt;li&gt;The target environment: how many staging boxes are there (Dev, Test, UAT, Prod)? Should the build be done automatically on which ones? Is there access from Jenkins (or it&amp;rsquo;s bots to all the needed machines?)&lt;/li&gt;
&lt;li&gt;Any quality assurance before deployment? Source code checks (e.g. naming conventions, comments,&amp;hellip;), automated testing?&lt;/li&gt;
&lt;li&gt;What happens in a case of failure? What would be the way to recover a (former) working version of the application?&lt;/li&gt;
&lt;li&gt;How can new jobs be added to Jenkins? Any Administrator/Ops Team? Automated?&lt;/li&gt;
&lt;li&gt;Any automated reports needed?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following steps have been done on a Windows Box (AWS Windows Server 2012).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Jenkins installation&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to Jenkins Homepage: &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;http://jenkins-ci.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download Windows Package / Unzip and start &amp;gt;setup.exe&amp;lt;&lt;/li&gt;
&lt;li&gt;Choose the installation directory. After setup is completed (on my box) a browser pops up, showing Jenkins waiting for jobs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/win1.jpg&#34; alt=&#34;Installation of Jenkins on Windows completed&#34; title=&#34;Jenkins on Windows&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you need to change the port of Jenkins standard configuration, it can be changed by editing the jenkins.xml file (change &lt;strong&gt;httpPort=8080&lt;/strong&gt;) which is located in the installation directory (choosen during installation).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/jenkinstibco/win2.png&#34; alt=&#34;Config file&#34; title=&#34;Jenkins config on Windows&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This was my original config - useful to increase heapsize etc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;service&amp;gt;
  &amp;lt;id&amp;gt;jenkins&amp;lt;/id&amp;gt;
  &amp;lt;name&amp;gt;Jenkins&amp;lt;/name&amp;gt;
  &amp;lt;description&amp;gt;This service runs Jenkins continuous integration system.&amp;lt;/description&amp;gt;
  &amp;lt;env name=&amp;quot;JENKINS_HOME&amp;quot; value=&amp;quot;%BASE%&amp;quot;/&amp;gt;
  &amp;lt;!--
    if you&#39;d like to run Jenkins with a specific version of Java, specify a full path to java.exe.
    The following value assumes that you have java in your PATH.
  --&amp;gt;
  &amp;lt;executable&amp;gt;%BASE%\jre\bin\java&amp;lt;/executable&amp;gt;
  &amp;lt;arguments&amp;gt;-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -jar &amp;quot;%BASE%\jenkins.war&amp;quot; --httpPort=8080&amp;lt;/arguments&amp;gt;
  &amp;lt;!--
    interactive flag causes the empty black Java window to be displayed.
    I&#39;m still debugging this.
  &amp;lt;interactive /&amp;gt;
  --&amp;gt;
  &amp;lt;logmode&amp;gt;rotate&amp;lt;/logmode&amp;gt;

  &amp;lt;onfailure action=&amp;quot;restart&amp;quot; /&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After applying any change, restart the Jenkins Service using e.g. the Windows Task Manager. For this article I changed the Jenkins Port to 6060.&lt;/p&gt;

&lt;p&gt;For more details (e.g. issues or advanced config, such as installing jenkins as a slave, check out: &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service&#34;&gt;the jenkins wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Preparation of BW5.12 scripted deployment&lt;/h2&gt;

&lt;p&gt;Within TIBCO BusinessWorks 5.12 ear-files (deployable artifact) are created via the TIBCO Utility/Script BuildEar. The deployment is done via the AppManage Utility. Both are available after installation of BW TRA.&lt;/p&gt;

&lt;p&gt;The AppManage utility must be run on a machine that is part of the administration domain you are updating.&lt;/p&gt;

&lt;p&gt;Example manual steps for deploying an application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AppManage -deploy -ear D:\jenkins\ears\deployment\helloworld_service2.ear -deployconfig D:\jenkins\ears\deployment\hello_service-bw5_dev.xml -cred D:\jenkins\cred.txt -app TestServices/hello-service -domain bw5_dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we would deploy &amp;amp; start a service within the TestServices folder. The AppManage Tool is located in the &lt;strong&gt;tra&lt;/strong&gt; folder of your installation (e.g. C:\tibco\tra\5.9\bin).&lt;/p&gt;

&lt;p&gt;The ear file can be created automatically via the build tool:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildear.exe -s -ear /helloworld_service.archive -o D:\jenkins\ears\deployment\helloworld_service2.ear -p C:\Users\Bob\Documents\bw5\helloworld_service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ear) takes the name of the project archive file, don&amp;rsquo;t forget the leading slasch!&lt;/li&gt;
&lt;li&gt;o) is the ouptut directory&lt;/li&gt;
&lt;li&gt;p) is the directory of the project (where the archive file is located)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The buildear is located in the same directory as the AppManage Tool.
For more specific explanations check the Tibco Documentation!&lt;/p&gt;

&lt;p&gt;Before deploying, as mentioned before, the config file has to be created (by AppManage) and adjusted to the target environment where the deployment will happen (usually a clever script).&lt;/p&gt;

&lt;p&gt;Export the config of an existing ear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AppManage -export -ear  D:\jenkins\ears\deployment\helloworld_service2.ear -out D:\jenkins\ears\deployment\helloworld_service2.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, in any case following command can be useful to export a current config from the Admin. It helps to understand what has to be changed inside the config file (when you are setting up things the first time)&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AppManage -export -app TestServices/helloworld_service -out D:/jenkins/helloworld_service.xml -domain bw5_dev -cred D:\jenkins\cred.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Next steps will include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jenkins/Git Integration&lt;/li&gt;
&lt;li&gt;automated checkout by Jekins&lt;/li&gt;
&lt;li&gt;automated deployment by Jekins&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
  </channel>
</rss>