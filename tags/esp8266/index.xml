<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hannes Lehmann</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://hanneslehmann.github.io/tags/esp8266/index.xml/</link>
    <language>en-us</language>
    <author>Hannes Lehmann</author>
    <copyright>2015 Hannes Lehmann</copyright>
    <updated>Sat, 03 Jan 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>IoT - ESP8266 WiFi Module with LUA Firmware</title>
      <link>http://hanneslehmann.github.io/2015/01/ESP8266Module_LUA/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2015/01/ESP8266Module_LUA/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Setup: This how-to was done using a Linux-PC (LMDE-Linux Mint Debian).&lt;/li&gt;
&lt;li&gt;Scope: PoC with LUA Firmware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using GtkTerm on Linux make sure that the configuration of the baudrate is set to 115200 (file: &amp;ldquo;~/.gtktermrc&amp;rdquo;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 115200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the LUA firmware for the esp8266 module (version ESP-01):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/nodemcu/nodemcu-firmware.git

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the file &amp;ldquo;nodemcu_512k_latest.bin&amp;rdquo; from folder pre_build/latest and connect GPIO0 to low; after that restart the module (with GPIO0 to low it boots to flashable mode). How the connection from USB to the module can be done has been documented in a (previous post)[&lt;a href=&#34;http://hanneslehmann.github.io/2014/12/ESP8266Module/&#34;&gt;http://hanneslehmann.github.io/2014/12/ESP8266Module/&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;Open a linux terminal, navigate to the already known Python script for flashing the firmware:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./esptool.py -p /dev/ttyUSB1 write_flash 0x000000 nodemcu_512k_latest.bin

Connecting...
Erasing flash...
Writing at 0x0007ef00... (100 %)

Leaving...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change baudrate of gtkterm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 9600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now opening again GtkTerm you can enter commands (note: every line is a command, the sign &amp;ldquo;&amp;gt;&amp;rdquo; indicates that the module expects a lua command).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; wifi.setmode(wifi.STATION)
&amp;gt; wifi.sta.config(&amp;quot;mywifi&amp;quot;,&amp;quot;mypass&amp;quot;)
stdin:1: unexpected symbol near &#39;char(27)&#39;

&amp;gt; print(wifi.sta.getip())
stdin: bad header in precompiled chunk
&amp;gt; print(wifi.sta.getip())
192.168.1.9
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok! This seemed to work, our esp8266 module is connected to our network (and has the ip 192.168.1.9)!
If you get some errors like &amp;ldquo;stdin:1: unexpected symbol near &amp;lsquo;char(27)&amp;rsquo;&amp;rdquo; or &amp;ldquo;stdin: bad header in precompiled chunk&amp;rdquo; then your terminal doesn&amp;rsquo;t support backspace or arrow input (either copy&amp;amp;paste issue, or you have done a correction of your input). Don&amp;rsquo;t worry, just repeat the command.&lt;/p&gt;

&lt;p&gt;I then copy and pasted the example for the simple http server from &lt;a href=&#34;https://github.com/nodemcu/nodemcu-firmware&#34;&gt;here&lt;/a&gt;; note: it even worked without correct line breaks!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; srv=net.createServer(net.TCP)     srv:listen(80,function(conn)       conn:on(&amp;quot;receive&amp;quot;,function(conn,payload)         print(payload)         conn:send(&amp;quot;&amp;lt;h1&amp;gt; Hello, NodeMcu.&amp;lt;/h1&amp;gt;&amp;quot;)      end)       conn:on(&amp;quot;sent&amp;quot;,function(conn) conn:close() end)    end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After browsing to &lt;a href=&#34;http://192.168.15.9/&#34;&gt;http://192.168.15.9/&lt;/a&gt; I get the expected response &amp;ldquo;Hello, NodeMcu.&amp;rdquo; and following log entries in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; GET / HTTP/1.1
Host: 192.168.1.9
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive


GET /favicon.ico HTTP/1.1
Host: 192.168.1.9
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive


GET /favicon.ico HTTP/1.1
Host: 192.168.1.9
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: image/png,image/*;q=0.8,*/*;q=0.5
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To restart the module the command node.restart() can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;node.restart()
&amp;gt; Z0�
       G��fR�f�	��C�NodeMcu 0.9.4 build 20141230  powered by Lua 5.1.4
lua: cannot open init.lua
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened? Our previous configured webserver vanished!! To make something permanent, the boot up message gives the hint: we need an &amp;ldquo;init.lua&amp;rdquo; file which is executed at the start and can be used to setup the module with the needed commands.
But even if the webserver vanished, the settings for the home/wifi access have been stored, and after reboot of the module it reconnects automatically!&lt;/p&gt;

&lt;p&gt;To make things easier, let&amp;rsquo;s use a small python script for uploading lua script files to esp8266:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/4refr0nt/luatool.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tool can be used to write a file into the wifi module, as it automates sending the file line by line.&lt;/p&gt;

&lt;p&gt;Sample usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ./luatool.py --port /dev/ttyUSB1 --src init.lua --dest init.lua --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention: don&amp;rsquo;t forget to close your Serial monitor, otherwise the tool might not get the responses from the module and quit working (or disable the check)!&lt;/p&gt;

&lt;p&gt;To solve my previous problem (arduino not getting the full message from the module, see post from 30DEC) I now created a lua.init file which I uploaded to route through the commands sent by tcp.&lt;/p&gt;

&lt;p&gt;From the linux box I now can send a message like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;Hello&#39; &amp;gt; /dev/tcp/192.168.1.9/2323
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it will be send to the serial output of the module.&lt;/p&gt;

&lt;p&gt;I will keep on going to check out this nice little module (already ordered a new version with some more GPIOs).&lt;/p&gt;

&lt;p&gt;Please let me know in case of any questions or clarifications needed!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>IoT - First Test of ESP8266 WiFi Module</title>
      <link>http://hanneslehmann.github.io/2014/12/ESP8266Module/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2014/12/ESP8266Module/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Setup: This how-to was done using a Linux-PC (LMDE-Linux Mint Debian).&lt;/li&gt;
&lt;li&gt;Scope: first communication test with the module over wifi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To try out the ESP8266 module I connected an USB-to-serial adapter which I ordered via the bay (&amp;ldquo;USB RS232 Serial TTL PL2303HX UART&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/usb_serial.jpg&#34; alt=&#34;Pinout&#34; title=&#34;Pinout of my module&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It was possible to reconnect the 5V power supply from USB within the module (just opened it) to the 3.3 Volt needed for the module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/usb_serial_mod.png&#34; alt=&#34;Re-connection&#34; title=&#34;Re-soldered red cable&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I wired up the module with the USB adapter; connected PIN CH_PD to VCC (3.3 Volt) and connected to PC. Red light goes on, blue flashes shortly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/pinout.png&#34; alt=&#34;Pinout&#34; title=&#34;Pinout of my module&#34; /&gt;
&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Signal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.3V (max 3.6V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ground&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TXD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Transmit Data (3.3V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RXD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Receive Data (3.3V)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CH_PD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Chip Power down: (LOW = Power down active)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GPIO0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;General Purpose I/O 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GPIO2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;General Purpose I/O 2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Reset (LOW = Reset active)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/connection.png&#34; alt=&#34;Connection&#34; title=&#34;Connect USB Serial to module&#34; /&gt;

The picture is not the best - the yellow bounded cable connects CH_PD with VCC. The green connector from the USB-Serial-Converter goes to RXD, and the white to TXD.&lt;/p&gt;

&lt;p&gt;After connecting the USB-Serial-Converter, my Linux shows following dmesg log:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[23081.471573] usb 1-3: New USB device found, idVendor=067b, idProduct=2303
[23081.471575] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=0
[23081.471576] usb 1-3: Product: USB-Serial Controller
[23081.471577] usb 1-3: Manufacturer: Prolific Technology Inc.
[23081.471957] pl2303 1-3:1.0: pl2303 converter detected
[23081.472510] usb 1-3: pl2303 converter now attached to ttyUSB1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I installed GtkTerm via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install gtkterm

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I made sure the config file of gtkterm: &amp;ldquo;.gtktermrc&amp;rdquo; in my home folder contains the right config for my setup (in fact I needed to change the port and speed config):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 115200
bits	= 8
stopbits	= 1
parity	= none
flow	= none
wait_delay	= 0
wait_char	= -1
rs485_rts_time_before_tx	= 30
rs485_rts_time_after_tx	= 30
echo	= False
crlfauto	= False
font	= &amp;quot;Nimbus Mono L, 14&amp;quot;
term_transparency	= False
term_show_cursor	= True
term_rows	= 80
term_columns	= 25
term_scrollback	= 200
term_visual_bell	= True
term_foreground_red	= 43253
term_foreground_blue	= 43253
term_foreground_green	= 43253
term_background_red	= 0
term_background_blue	= 0
term_background_green	= 0
term_background_saturation	= 0,500000

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I was ready to play around with gtkterm. Actually my terminal was showing nothing, until I typed the first command (AT). For details about the below mentioned commandos (all starting with AT) - please visit: &lt;a href=&#34;https://nurdspace.nl/ESP8266#AT_Commands&#34;&gt;https://nurdspace.nl/ESP8266#AT_Commands&lt;/a&gt; or &lt;a href=&#34;http://www.electrodragon.com/w/Wi07c&#34;&gt;this website&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AT

OK
AT+RST

OK

 ets Jan  8 2013,rst cause:4, boot mode:(3,7)

wdt reset
load 0x40100000, len 24444, room 16 
tail 12
chksum 0xe0
ho 0 tail 12 room 4
load 0x3ffe8000, len 3168, room 12 
tail 4
chksum 0x93
load 0x3ffe8c60, len 4956, room 4 
tail 8
chksum 0xbd
csum 0xbd

ready

AT+GMR
00160901

OK
AT?
no this fun
AT+CWMODE?
+CWMODE:2

OK
AT+CWMODE=3

OK
AT+CWMODE?
+CWMODE:3

OK
AT+CWLAP
+CWLAP:(0,&amp;quot;&amp;quot;,0)
+CWLAP:(4,&amp;quot;wifi1&amp;quot;,-86)
+CWLAP:(3,&amp;quot;wifi2&amp;quot;,-72)
+CWLAP:(3,&amp;quot;wifi3&amp;quot;,-83)
+CWLAP:(3,&amp;quot;mywifi&amp;quot;,-63)

OK
AT+CWJAP=&amp;quot;mywifi&amp;quot;,&amp;quot;mypass&amp;quot;

OK
AT+CIFSR
192.168.1.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After above commandos the module is connected with my home wifi (&amp;ldquo;mywifi&amp;rdquo;) which is secured with a password. The IP adress of the module is &amp;ldquo;192.168.1.20&amp;rdquo; (automatically received by the DHCP of the wifi router). Now I will start a TCP server listening on Port 8001 on the module (timeout is set to 180 sec because the module handles only a limited number of connections; we might free some long running idle ones):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OK
AT+CIPSERVER=1,8001

OK
AT+CIPSTO=180

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the linux box I open a terminal; started a telnet connection; entered the message &amp;ldquo;Helo&amp;rdquo; and pressed &amp;gt;enter&amp;lt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;telnet 192.168.15.20 8001
Trying 192.168.15.20...
Connected to 192.168.15.20.
Escape character is &#39;^]&#39;.
Helo


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the serial monitor (gtkterm) I can see the terminal receiving the message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Link

+IPD,0,6:Helo

OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Next step is to have an arduino react/respond on tcp messages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After consulting some forums in the internet I have read, that some additional preparation of the module is needed to talk with arduino (downgrade baudrate of the module). By the way - some alternative firmware exists for running LUA and/or even a webserver on the module using the GPIOs directly. But I want to talk to the Arduino Nano, so I need the following steps.&lt;/p&gt;

&lt;p&gt;Clone the flash utility:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/themadinventor/esptool.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the firmware &lt;a href=&#34;http://www.electrodragon.com/w/Wi07c&#34;&gt;esp8266.9.2.2.bin&lt;/a&gt; or &lt;a href=&#34;/esp8266/v0.9.2.2Firmware.zip&#34;&gt;here&lt;/a&gt; and unzip it to the folder of the esptool.&lt;/p&gt;

&lt;p&gt;Now connect GPIO0 to low and restart the module (with GPIO0 to low it boots to flashable mode).&lt;/p&gt;

&lt;p&gt;Trying to run the flash utility gave me an error (note that my serial converter sits on USB1, your setup might be different!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./esptool.py -p /dev/ttyUSB1 write_flash 0x000000 v0.9.2.2\ AT\ Firmware.bin 
Traceback (most recent call last):
  File &amp;quot;./esptool.py&amp;quot;, line 22, in &amp;lt;module&amp;gt;
    import serial
ImportError: No module named serial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I had to install the python serial modul via pip:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pip install pyserial
Downloading/unpacking pyserial
  Downloading pyserial-2.7.tar.gz (122kB): 122kB downloaded
  Running setup.py egg_info for package pyserial
    
Installing collected packages: pyserial
  Running setup.py install for pyserial
    changing mode of build/scripts-2.7/miniterm.py from 644 to 755
    
    changing mode of /usr/local/bin/miniterm.py to 755
Successfully installed pyserial
Cleaning up...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that I was able to flash the firmware:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ./esptool.py -p /dev/ttyUSB1 write_flash 0x000000 v0.9.2.2\ AT\ Firmware.bin
Connecting...
Erasing flash...
Writing at 0x0007ef00... (100 %)

Leaving...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have to change the baudrate for gtkterm (see above for the details) and restart gtkterm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 9600
bits	= 8
stopbits	= 1
parity	= none
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing has changed for the communication with the module after the upgrade: after every command entered in gtkterm, not only Return has to be hit, but additionally Ctrl + J as well (CR+LF). So what do we get? Let&amp;rsquo;s change the baudrate to 57600:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
AT

OK
AT+GMR
0018000902

OK
AT+CIOBAUD?
+CIOBAUD:9600

OK
AT+CIOBAUD=57600
BAUD-&amp;gt;57600

OK
R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&amp;gt; reconfigure &amp;amp; restart gtkterm!&lt;/p&gt;

&lt;p&gt;As the new firmware changed some settings, we need to issue some more commands to get our tcp server back online (this time on ip 192.168.1.25&amp;hellip;.):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AT+CIPMUX?
+CIPMUX:0

OK
AT+CIPMUX=1

OK
AT+CIPMUX?

+CIPMUX:1

OK
AT+CIPSERVER=1,8001

OK
AT+CIFSR

192.168.4.1
192.168.1.25

OK
Link

+IPD,0,6:helo

OK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I will be ready to connect the Arduino Nano to my wifi module!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Connecting Arduino Nano is done really easily, with one level shifter (a resistor should work as well). I connected additionally the USB-Serial-Converter to the SoftSerial Arduino to see debug messages.&lt;/p&gt;

&lt;p&gt;The Arduino is powered through the USB connection to the PC. During upload of the Arduino Sketch, the serial connection to the Wifi module has to be removed and reconnected afterwards.&lt;/p&gt;

&lt;p&gt;I have pulled the CH_PD Pin to VCC, first with resistor (10k) then without. Without it was working more stable for me. &lt;a href=&#34;/esp8266/fritzing_layout.png&#34;&gt;Here&lt;/a&gt; the big picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/esp8266/fritzing_layout_small.png&#34; alt=&#34;Schematic&#34; title=&#34;Schematic&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;What we now need is the corresponding Arduino Sketch. I will upload it soon to my GitHub repo - here the first draft, inspired by Ray Wang @ Rayshobby LLC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* ====== ESP8266 TCP Demo ======
 * Receive &amp;amp; Respond via TCP
 * (Updated Dec 30, 2014)
 * ==========================
 *
 * Change SSID and PASS to match your WiFi settings.
 * The IP address is displayed to soft serial upon successful connection.
 *
 * Inspired by
 * Ray Wang @ Rayshobby LLC
 * http://rayshobby.net/?p=9734
 * http://raysfiles.com/arduino/ESP8266a_arduino.ino
 */

#include &amp;lt;SoftwareSerial.h&amp;gt;

#define BUFFER_SIZE 512
#define esp Serial
#define SSID  &amp;quot;mywifi&amp;quot;      // change this to match your WiFi SSID
#define PASS  &amp;quot;mypassword&amp;quot;     // change this to match your WiFi password
#define PORT  &amp;quot;8001&amp;quot;          // using port 8001 by default

char buffer[BUFFER_SIZE];

// Software Serial for debug
SoftwareSerial dbg(10,11);  // use pins 10, 11 for software serial 

// By default we are looking for OK\r\n
char OKrn[] = &amp;quot;OK\r\n&amp;quot;;

// LED Pin
const int LED = 13;


byte wait_for_esp_response(int timeout, char* term=OKrn) {
  unsigned long t=millis();
  bool found=false;
  int i=0;
  int len=strlen(term);
  // wait for at most timeout milliseconds
  // or if OK\r\n is found
  while(millis()&amp;lt;t+timeout) {
    if(esp.available()) {
      buffer[i++]=esp.read();
      if(i&amp;gt;=len) {
        if(strncmp(buffer+i-len, term, len)==0) {
          found=true;
          break;
        }
      }
    }
  }
  buffer[i]=0;
  dbg.print(buffer);
  return found;
}

void setup() {

  // assume esp8266 operates at 57600 baud rate
  // change if necessary to match your modules&#39; baud rate
  esp.begin(57600);
  
  dbg.begin(9600);
  dbg.println(&amp;quot;begin.&amp;quot;);
  
  // Setup LED PIN as output
  pinMode(LED, OUTPUT);
  
  // blink test
  digitalWrite(LED, HIGH); // LED on
  delay(500); // 500 ms delay
  digitalWrite(LED, LOW); // LED off
    
  setupWiFi();

  // print device IP address
  dbg.print(&amp;quot;device ip addr:&amp;quot;);
  esp.println(&amp;quot;AT+CIFSR&amp;quot;);
  wait_for_esp_response(1000);
}

bool read_till_eol() {
  char incomingByte = 0;   // for incoming serial data
  static int i=0;
  if(esp.available()&amp;gt;0) {
    incomingByte = esp.read();
      buffer[i++]=incomingByte;
      if(i==BUFFER_SIZE)  i=0;
      if(i&amp;gt;1 &amp;amp;&amp;amp; buffer[i-2]==13 &amp;amp;&amp;amp; buffer[i-1]==10) {
        buffer[i]=0;
        i=0;
        dbg.print(buffer);
        return true;
    }
  }
  return false;
}

void loop() {
  int ch_id, packet_len;
  char *pb;  
  if(read_till_eol()) {
    dbg.println(&amp;quot;----------------------------------&amp;quot;);
    if(strncmp(buffer, &amp;quot;+IPD,&amp;quot;, 5)==0) {
      // request: +IPD,ch,len:data
      sscanf(buffer+5, &amp;quot;%d,%d&amp;quot;, &amp;amp;ch_id, &amp;amp;packet_len);
      if (packet_len &amp;gt; 0) {
        // read serial until packet_len character received
        // start from :
        pb = buffer+5;
        while(*pb!=&#39;:&#39;) pb++;
        pb++;
        dbg.print(&amp;quot;Message received: &amp;quot;);
        dbg.println(pb);
        send_Response(ch_id, &amp;quot;ACK&amp;quot;);
        if (strncmp(pb, &amp;quot;LEDON&amp;quot;, 5) == 0) {
          digitalWrite(LED, HIGH); // LED on
        }
        if (strncmp(pb, &amp;quot;LEDOFF&amp;quot;, 6) == 0){
          digitalWrite(LED, LOW); // LED on
        }
      }
    }
  }
}


void send_Response(int ch_id, String content) {
  esp.print(&amp;quot;AT+CIPSEND=&amp;quot;);
  esp.print(ch_id);
  esp.print(&amp;quot;,&amp;quot;);
  esp.println(content.length());
  if(wait_for_esp_response(2000, &amp;quot;&amp;gt; &amp;quot;)) {
    esp.print(content);
  } else {
    esp.print(&amp;quot;AT+CIPCLOSE=&amp;quot;);
    esp.println(ch_id);
  }
}


void setupWiFi() {
  // try empty AT command
  esp.println(&amp;quot;AT&amp;quot;);
  wait_for_esp_response(1000);

  // set mode 1 (client)
  esp.println(&amp;quot;AT+CWMODE=1&amp;quot;);
  wait_for_esp_response(1000);  

  // reset WiFi module
  esp.print(&amp;quot;AT+RST\r\n&amp;quot;);
  wait_for_esp_response(1500);
 
  // join AP
  esp.print(&amp;quot;AT+CWJAP=\&amp;quot;&amp;quot;);
  esp.print(SSID);
  esp.print(&amp;quot;\&amp;quot;,\&amp;quot;&amp;quot;);
  esp.print(PASS);
  esp.println(&amp;quot;\&amp;quot;&amp;quot;);
  // this may take a while, so wait for 5 seconds
  wait_for_esp_response(5000);
  
  esp.println(&amp;quot;AT+CIPSTO=30&amp;quot;);  
  wait_for_esp_response(1000);

  // start server
  esp.println(&amp;quot;AT+CIPMUX=1&amp;quot;);
  wait_for_esp_response(1000);
  
  esp.print(&amp;quot;AT+CIPSERVER=1,&amp;quot;); // turn on TCP service
  esp.println(PORT);
  wait_for_esp_response(1000);
  
    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A little success: Arduino sends correctly the AT commands to connect to the network! It receives an IP adress, I even can telnet to it!&lt;/p&gt;

&lt;p&gt;I can see (on the debug serial) following commands running through:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;begin.
AT

OK
AT+CWMODE=1
no change
AT+RST

OK
AT+CWJAP=&amp;quot;mywlan&amp;quot;,&amp;quot;mypassword&amp;quot;
B�
  r�Ĥ���HB߬!{�����1�!�+!��B(�C)����B�B1�c+&amp;amp;ƅ��&amp;quot;�C�*�B����!(��9*)%�Ǆ�b�c����Cx��B)�!���r�,%��D��c����C�!愆D
[System Ready, Vendor:www.ai-thinker.com]
AT+CIPSTO=30

ERROR
AT+CIPMUX=1

OK
AT+CIPSERVER=1,8080

OK
device ip addr:AT+CIFSR
192.168.1.30

OK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does not work?&lt;/p&gt;

&lt;p&gt;I wanted to switch the on-board LED of the Arduino via TCP commands (&amp;ldquo;LEDON&amp;rdquo; / &amp;ldquo;LEDOFF&amp;rdquo;) but at the moment I am struggling with the communication from the esp8266 to the Arduino. Sending the message &amp;ldquo;Hello&amp;rdquo; through a telnet terminal, I can see that the Wifi module is sending the complete message: &amp;ldquo;+IPD,0,7:Hello&amp;rdquo; but only a crippled message is received by the Arduino &amp;ldquo;+0lloOK&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;.to be continued&amp;hellip;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you run into problems or if you have any suggestions for the mistakes I have made, please leave a comment!&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>