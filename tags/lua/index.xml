<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hannes Lehmann</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://hanneslehmann.github.io/tags/lua/index.xml/</link>
    <language>en-us</language>
    <author>Hannes Lehmann</author>
    <copyright>2015 Hannes Lehmann</copyright>
    <updated>Sat, 03 Jan 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>IoT - ESP8266 WiFi Module with LUA Firmware</title>
      <link>http://hanneslehmann.github.io/2015/01/ESP8266Module_LUA/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 UTC</pubDate>
      <author>Hannes Lehmann</author>
      <guid>http://hanneslehmann.github.io/2015/01/ESP8266Module_LUA/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Setup: This how-to was done using a Linux-PC (LMDE-Linux Mint Debian).&lt;/li&gt;
&lt;li&gt;Scope: PoC with LUA Firmware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using GtkTerm on Linux make sure that the configuration of the baudrate is set to 115200 (file: &amp;ldquo;~/.gtktermrc&amp;rdquo;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 115200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the LUA firmware for the esp8266 module (version ESP-01):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/nodemcu/nodemcu-firmware.git

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the file &amp;ldquo;nodemcu_512k_latest.bin&amp;rdquo; from folder pre_build/latest and connect GPIO0 to low; after that restart the module (with GPIO0 to low it boots to flashable mode). How the connection from USB to the module can be done has been documented in a (previous post)[&lt;a href=&#34;http://hanneslehmann.github.io/2014/12/ESP8266Module/&#34;&gt;http://hanneslehmann.github.io/2014/12/ESP8266Module/&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;Open a linux terminal, navigate to the already known Python script for flashing the firmware:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./esptool.py -p /dev/ttyUSB1 write_flash 0x000000 nodemcu_512k_latest.bin

Connecting...
Erasing flash...
Writing at 0x0007ef00... (100 %)

Leaving...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change baudrate of gtkterm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[default]
port	= /dev/ttyUSB1
speed	= 9600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now opening again GtkTerm you can enter commands (note: every line is a command, the sign &amp;ldquo;&amp;gt;&amp;rdquo; indicates that the module expects a lua command).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; wifi.setmode(wifi.STATION)
&amp;gt; wifi.sta.config(&amp;quot;mywifi&amp;quot;,&amp;quot;mypass&amp;quot;)
stdin:1: unexpected symbol near &#39;char(27)&#39;

&amp;gt; print(wifi.sta.getip())
stdin: bad header in precompiled chunk
&amp;gt; print(wifi.sta.getip())
192.168.1.9
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok! This seemed to work, our esp8266 module is connected to our network (and has the ip 192.168.1.9)!
If you get some errors like &amp;ldquo;stdin:1: unexpected symbol near &amp;lsquo;char(27)&amp;rsquo;&amp;rdquo; or &amp;ldquo;stdin: bad header in precompiled chunk&amp;rdquo; then your terminal doesn&amp;rsquo;t support backspace or arrow input (either copy&amp;amp;paste issue, or you have done a correction of your input). Don&amp;rsquo;t worry, just repeat the command.&lt;/p&gt;

&lt;p&gt;I then copy and pasted the example for the simple http server from &lt;a href=&#34;https://github.com/nodemcu/nodemcu-firmware&#34;&gt;here&lt;/a&gt;; note: it even worked without correct line breaks!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; srv=net.createServer(net.TCP)     srv:listen(80,function(conn)       conn:on(&amp;quot;receive&amp;quot;,function(conn,payload)         print(payload)         conn:send(&amp;quot;&amp;lt;h1&amp;gt; Hello, NodeMcu.&amp;lt;/h1&amp;gt;&amp;quot;)      end)       conn:on(&amp;quot;sent&amp;quot;,function(conn) conn:close() end)    end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After browsing to &lt;a href=&#34;http://192.168.15.9/&#34;&gt;http://192.168.15.9/&lt;/a&gt; I get the expected response &amp;ldquo;Hello, NodeMcu.&amp;rdquo; and following log entries in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; GET / HTTP/1.1
Host: 192.168.1.9
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive


GET /favicon.ico HTTP/1.1
Host: 192.168.1.9
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive


GET /favicon.ico HTTP/1.1
Host: 192.168.1.9
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: image/png,image/*;q=0.8,*/*;q=0.5
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To restart the module the command node.restart() can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;node.restart()
&amp;gt; Z0�
       G��fR�f�	��C�NodeMcu 0.9.4 build 20141230  powered by Lua 5.1.4
lua: cannot open init.lua
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened? Our previous configured webserver vanished!! To make something permanent, the boot up message gives the hint: we need an &amp;ldquo;init.lua&amp;rdquo; file which is executed at the start and can be used to setup the module with the needed commands.
But even if the webserver vanished, the settings for the home/wifi access have been stored, and after reboot of the module it reconnects automatically!&lt;/p&gt;

&lt;p&gt;To make things easier, let&amp;rsquo;s use a small python script for uploading lua script files to esp8266:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/4refr0nt/luatool.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tool can be used to write a file into the wifi module, as it automates sending the file line by line.&lt;/p&gt;

&lt;p&gt;Sample usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ./luatool.py --port /dev/ttyUSB1 --src init.lua --dest init.lua --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention: don&amp;rsquo;t forget to close your Serial monitor, otherwise the tool might not get the responses from the module and quit working (or disable the check)!&lt;/p&gt;

&lt;p&gt;To solve my previous problem (arduino not getting the full message from the module, see post from 30DEC) I now created a lua.init file which I uploaded to route through the commands sent by tcp.&lt;/p&gt;

&lt;p&gt;From the linux box I now can send a message like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;Hello&#39; &amp;gt; /dev/tcp/192.168.1.9/2323
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it will be send to the serial output of the module.&lt;/p&gt;

&lt;p&gt;I will keep on going to check out this nice little module (already ordered a new version with some more GPIOs).&lt;/p&gt;

&lt;p&gt;Please let me know in case of any questions or clarifications needed!&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>